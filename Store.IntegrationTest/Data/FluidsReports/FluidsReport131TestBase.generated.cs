//----------------------------------------------------------------------- 
// PDS WITSMLstudio Store, 2018.3
//
// Copyright 2018 PDS Americas LLC
// 
// Licensed under the PDS Open Source WITSML Product License Agreement (the
// "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   
//     http://www.pds.group/WITSMLstudio/OpenSource/ProductLicenseAgreement
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------

// ----------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
// ----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Energistics.DataAccess;
using Energistics.DataAccess.WITSML131;
using Energistics.DataAccess.WITSML131.ComponentSchemas;
using Energistics.DataAccess.WITSML131.ReferenceData;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace PDS.WITSMLstudio.Store.Data.FluidsReports
{
    public abstract partial class FluidsReport131TestBase : IntegrationTestFixtureBase<DevKit131Aspect>
    {
        public const string QueryMissingNamespace = "<fluidsReports version=\"1.3.1.1\"><fluidsReport /></fluidsReports>";
        public const string QueryInvalidNamespace = "<fluidsReports xmlns=\"www.witsml.org/schemas/123\" version=\"1.3.1.1\"></fluidsReports>";
        public const string QueryMissingVersion = "<fluidsReports xmlns=\"http://www.witsml.org/schemas/131\"></fluidsReports>";
        public const string QueryEmptyRoot = "<fluidsReports xmlns=\"http://www.witsml.org/schemas/131\" version=\"1.3.1.1\"></fluidsReports>";
        public const string QueryEmptyObject = "<fluidsReports xmlns=\"http://www.witsml.org/schemas/131\" version=\"1.3.1.1\"><fluidsReport /></fluidsReports>";
        public const string BasicXMLTemplate = "<fluidsReports xmlns=\"http://www.witsml.org/schemas/131\" version=\"1.3.1.1\"><fluidsReport uidWell=\"{0}\" uidWellbore=\"{1}\" uid=\"{2}\">{3}</fluidsReport></fluidsReports>";

        protected FluidsReport131TestBase(bool isEtpTest = false)
            : base(isEtpTest)
        {
        }

        public Well Well { get; set; }
        public Wellbore Wellbore { get; set; }
        public FluidsReport FluidsReport { get; set; }
        public List<FluidsReport> QueryEmptyList { get; set; }

        protected override void PrepareData()
        {

            DevKit.Store.CapServerProviders = DevKit.Store.CapServerProviders
                .Where(x => x.DataSchemaVersion == OptionsIn.DataVersion.Version131.Value)
                .ToArray();

            Well = new Well
            {
                Uid = DevKit.Uid(),
                Name = DevKit.Name("Well"),
                TimeZone = DevKit.TimeZone
            };
            Wellbore = new Wellbore
            {
                Uid = DevKit.Uid(),
                Name = DevKit.Name("Wellbore"),
                UidWell = Well.Uid,
                NameWell = Well.Name,
                MDCurrent = new MeasuredDepthCoord(0, MeasuredDepthUom.ft)
            };
            FluidsReport = new FluidsReport
            {
                Uid = DevKit.Uid(),
                Name = DevKit.Name("FluidsReport"),
                UidWell = Well.Uid,
                NameWell = Well.Name,
                UidWellbore = Wellbore.Uid,
                NameWellbore = Wellbore.Name
            };

            QueryEmptyList = DevKit.List(new FluidsReport());

        }

        protected virtual void AddParents()
        {
            DevKit.AddAndAssert<WellList, Well>(Well);
            DevKit.AddAndAssert<WellboreList, Wellbore>(Wellbore);
        }
    }
}